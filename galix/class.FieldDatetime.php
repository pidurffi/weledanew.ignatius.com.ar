<?phpinclude_once(GALIX_FOLDER."class.Field.php");// Se dejan aquí las constantes como referencias.// Ya están definidas en galix/class.FieldDate.php,// por eso deben estar comentadas.// Día Mes Año// define ("FIELD_DATE_FORMAT_DMY",1);// Mes Día Año// define ("FIELD_DATE_FORMAT_MDY",2);// Año Mes Día// define ("FIELD_DATE_FORMAT_YMD",3);class FieldDatetime extends Field {	var $name;	var $visualName;	var $tableName;	var $format;	var $required;	var $min_year;	var $max_year;	function FieldDatetime($name,$params) {		$this->name = $name;		$this->visualName = $params['visualName'];		$this->tableName = $params['tableName'];		$this->format = $params['format'];		$this->required = $params['required'];		$this->min_year = $params['min_year'];        	$this->max_year = $params['max_year'];		$this->value = array("d"=>0,"m"=>0,"y"=>0,"h"=>0,"min"=>0);	}	private function showFormFieldDay($params) { ?>		<select name="<?= $this->name?>_d">			<?php if(!$this->required) { ?>			<option value="">D&iacute;a</option>			<?php } ?>			<?php for($i=1;$i<=31;$i++) { ?>			<option value="<?= $i?>" <?= ($i==$this->value['d'])?"selected":""; ?>><?= $i?></option>			<?php } ?>		</select>	<?php }	private function showFormFieldMonth($params) {        $nombre_de_mes = array(1=>"enero",2=>"febrero",3=>"marzo",4=>"abril",5=>"mayo",6=>"junio",                7=>"julio",8=>"agosto",9=>"septiembre",10=>"octubre",11=>"noviembre",12=>"diciembre");            ?>		    <select name="<?= $this->name?>_m" <?= ($i==$this->value['m'])?"selected":""; ?>>			    <?php if(!$this->required) { ?>			    <option value="">Mes</option>			    <?php } ?>			    <?php for($i=1;$i<=12;$i++) { ?>				<option value="<?= $i?>" <?= ($i==$this->value['m'])?"selected":""; ?>><?= $nombre_de_mes[$i];?></option>			    <?php } ?>		    </select>            <?php    }	private function showFormFieldYear($params) { ?>		<select name="<?= $this->name?>_y" <?= ($i==$this->value['y'])?"selected":""; ?>>			<?php if(!$this->required) { ?>			<option value="">A&ntilde;o</option>			<?php } ?>			<?php for($i=$this->min_year;$i<=$this->max_year;$i++) { ?>			<option value="<?= $i?>" <?= ($i==$this->value['y'])?"selected":""; ?>><?= $i?></option>			<?php } ?>		</select>	<?php	}        // Antes de la hora pongo espacios y una raya.        private function showFormFieldHour($params) { ?>                &nbsp;&nbsp;&ndash;&nbsp;&nbsp;		<select name="<?= $this->name?>_h">			<?php if(!$this->required) { ?>			<option value="">Hora</option>			<?php } ?>			<?php for($i=00;$i<=23;$i++) { ?>			<option value="<?= $i?>" <?= ($i==$this->value['h'])?"selected":""; ?>><?= $i?></option>			<?php } ?>		</select>	<?php }                // Antes de los minutos imprimo ":"        private function showFormFieldMinute($params) { ?>                :		<select name="<?= $this->name?>_min">			<?php if(!$this->required) { ?>			<option value="">Minuto</option>			<?php } ?>			<?php for($i=00;$i<=59;$i++) { ?>			<option value="<?= $i?>" <?= ($i==$this->value['min'])?"selected":""; ?>><?= $i?></option>			<?php } ?>		</select>	<?php }        	function showFormField($params) {		switch($this->format) {			case FIELD_DATE_FORMAT_DMY:                            $this->showFormFieldDay($params);                            $this->showFormFieldMonth($params);                            $this->showFormFieldYear($params);                            $this->showFormFieldHour($params);                            $this->showFormFieldMinute($params);                            break;			case FIELD_DATE_FORMAT_MDY:                            $this->showFormFieldMonth($params);                            $this->showFormFieldDay($params);                            $this->showFormFieldYear($params);                            $this->showFormFieldHour($params);                            $this->showFormFieldMinute($params);                            break;			default:                            $this->showFormFieldYear($params);                            $this->showFormFieldMonth($params);                            $this->showFormFieldDay($params);                            $this->showFormFieldHour($params);                            $this->showFormFieldMinute($params);                            break;		}		return;	}	function validateFromPost(&$errors) {        /* Si día o mes o año son vacíos, debe verificar que la fecha sea válida.            Es decir que, si los tres son vacíos, no verifico nada, ya que el campo no es obligatorio. */        if ($this->value['d']!="" or $this->value['m']!="" or $this->value['y']!="" or $this->value['h']!="" or $this->value['min']!="")        {            /* Si día o mes o año son vacíos, da error. Si no, verifica la úiltima parte del OR (el checkdate). */            if( ($this->value['d']=="" or $this->value['m']=="" or $this->value['y']=="")                    or !checkdate($this->value['m'],$this->value['d'],$this->value['y']))            {            			$errors[] = "Debe elegir una fecha correcta";		    }        }		return true;	}	function fillWithPost() {		$this->value['d'] = $_POST[$this->name."_d"];		$this->value['m'] = $_POST[$this->name."_m"];		$this->value['y'] = $_POST[$this->name."_y"];                $this->value['h'] = $_POST[$this->name."_h"];                $this->value['min'] = $_POST[$this->name."_min"];	}	function  hasDirectSave() {		return true;	}	function getValueForDbFromPost(&$isNull=false) {		return valueToDb($this->value['y'])."-".valueToDb($this->value['m'])."-".valueToDb($this->value['d'])." ".valueToDb($this->value['h']).":".valueToDb($this->value['min']).":00";	}	function fillWithDb($reg) {                // Divido lo que llega del MySQL en hora y fecha.                $fecha = date('Y-m-d',strtotime($reg[$this->name]));                $hora = date('H:i:s',strtotime($reg[$this->name]));                                // Divido la fecha por guiones.                list($this->value['y'],$this->value['m'],$this->value['d']) = explode("-",$fecha);                                // Divido la hora en dos puntos (los segundos se pierden).		list($this->value['h'],$this->value['min']) = explode(":",$hora);	}	function getJoinSql($entityTableName,$uniqueExtraAlias) {		return "";	}	function getFieldSqlDescription($entityTableName,$uniqueExtraAlias) {		$db = GlobalManager::getDb();                $sql = $entityTableName.".".$this->tableName." AS ".$this->name;		return $sql;	}	}?>